###########################################################
#
# job management (part of GENDB)
#
# warning ! this package is _not_ generated by O2DBI !
#
# $Id: Job.pm,v 1.1.1.1 2005/02/22 18:05:36 givans Exp $
#
# $Log: Job.pm,v $
# Revision 1.1.1.1  2005/02/22 18:05:36  givans
#
#
# Revision 1.2  2000/12/21 11:30:46  jc
# *** empty log message ***
#
# Revision 1.1  2000/05/19 13:27:00  blinke
# Initial revision
#
#
###########################################################

package Job;

use DBI;
use Exporter;

use strict 'refs';

@ISA = qw(Exporter);

#$JOBDB_DBSOURCE = "DBI:mysql:gendb_jobs:mysql.cgrb.oregonstate.edu";
#$JOBDB_DBSOURCE = "DBI:mysql:gendb_jobs:lewis2.rnet.missouri.edu;port=53307";
#$JOBDB_DBSOURCE = "DBI:mysql:gendb_jobs:ircf-login-0-1.local";
$JOBDB_DBSOURCE = "DBI:mysql:gendb_jobs:login-0-7.local";

$JOBDB_DBH = DBI->connect($JOBDB_DBSOURCE,'genDB_cluster','microbes')
    || die "can't connect to database: $!\n";

sub newid {
    my ($table) = @_;
    $JOBDB_DBH->do(qq {
		LOCK TABLES JOB_counters WRITE
	}) || return(-1);
    my $sth = $JOBDB_DBH->prepare(qq {
		SELECT val FROM JOB_counters WHERE object='$table'
	});
    $sth->execute;
    my ($curval) = $sth->fetchrow_array;
    $sth->finish;
    $curval++;
    $JOBDB_DBH->do(qq {
	UPDATE JOB_counters SET val=$curval WHERE object='$table'
	});
    $JOBDB_DBH->do(qq {
		UNLOCK TABLES
    }) || return(-1);
    return($curval);
}

sub create {
    my ($class, $project_name, $job_info) = @_;
    # fetch a fresh id
    my $id = newid('job');
        if ($id < 0) {
	return(-1);
    }
    # insert the primary key into the database
    $JOBDB_DBH->do(qq {
            INSERT INTO job (id) VALUES ($id)
           });
    if ($JOBDB_DBH->err) {
	return(-1);
    }
    # create the perl object
    my $job = { 'id' => $id,
		    '_buffer' => 1 };
    bless($job, $class);
    # fill in the remaining data
    $job->project_name($project_name);
    $job->job_info($job_info);
    $job->getset('lock_state',0);
    $job->unbuffer;
    return($job);
}

# create an object for already existing data
sub init_id {
    my ($class, $req_id) = @_;
    # fetch the data from the database
    my $sth = $JOBDB_DBH->prepare(qq {
	SELECT project_name, job_info, lock_state, locked_by, id FROM job
		WHERE id='$req_id'
	});
    $sth->execute;
    my ($project_name, $job_info, $lock_state, $locked_by, $id) = $sth->fetchrow_array;
    $sth->finish;
    # if successful, return an appropriate object
    if (!defined($id)) {
	return(-1);
    } else {
	my $job = {
		'project_name' => $project_name, 
		'job_info' => $job_info,
		'lock_state' => $lock_state,
		'locked_by' => $locked_by,
		'id' => $id
		};
        bless($job, $class);
        return($job);
    }
}


sub fetchnextjob {
    my ($class) = @_;

    # get the first unlocked job
    my $sth = $JOBDB_DBH->prepare(qq {
	SELECT project_name, job_info, lock_state, locked_by, id FROM job WHERE lock_state=0 LIMIT 1});
    $sth->execute;
    my ($project_name, $job_info, $lock_state, $locked_by, $id) = $sth->fetchrow_array;
    $sth->finish;
    # if successful, return an appropriate object
    if (!defined($id)) {
	return(-1);
    } else {
	my $job = {
	    'project_name' => $project_name, 
	    'job_info' => $job_info,
	    'lock_state' => $lock_state,
	    'locked_by' => $locked_by,
	    'id' => $id
	    };
        bless($job, $class);
        return($job);
    }
}

# get all those objects from the database efficiently that conform to the
# given WHERE clause and return an array reference
sub fetchbySQL {
    my ($class, $statement) = @_;
    local @job = ();
    my $sth = $JOBDB_DBH->prepare(qq {
	SELECT project_name, job_info, lock_state, locked_by, id FROM job WHERE $statement
	});
    $sth->execute;
    while (($project_name, $job_info, $locked_by, $lock_state, $id) = $sth->fetchrow_array) {
	my $job = {
	    'project_name' => $project_name, 
	    'job_info' => $job_info,
	    'lock_state' => $lock_state,
	    'locked_by' => $locked_by,
	    'id' => $id
	    };
	bless($job, $class);
	push(@job, $job);
    }
    $sth->finish;
    return(\@job);
}

# delete an object completely from the database
sub delete {
    my ($self) = @_;
    my $id = $self->id;
    $JOBDB_DBH->do(qq {
	DELETE FROM job WHERE id=$id
	}) || return(-1);
    undef($self);
}

########################################################################
#
# methods to access the member variables
#
########################################################################

# get or set the member variable 'project_name'
sub project_name {
    my ($self, $name) = @_;
    return($self->getset('project_name', $name));
}

# get or set the member variable 'job_info'
sub job_info {
    my ($self, $length) = @_;
    return($self->getset('job_info', $length));
}

# lock job
sub lock {
    my ($self, $name) = @_;
    die "job already locked\n" if ($self->{lock_state});
    die "wrong way using job->lock\n"  if (!$name);
    $self->buffer;
    $self->getset('lock_state', 1);
    $self->getset('locked_by', $name);
    $self->unbuffer;
}

# unlock job
sub unlock {
    my ($self, $name) = @_;
    die "job not locked\n" if (! $self->{lock_state});
    die "job not locked by this host\n" if ($self->{locked_by}!=$name);
    $self->buffer;
    $self->getset('lock_state', 0);
    $self->getset('locked_by', "");
    $self->unbuffer;
}

# finish job
sub finish {
    my ($self, $name) = @_;
    die "only locked jobs may be finished\n" if (! $self->{lock_state});
    die "job not locked by this host\n" if ($self->{locked_by}!=$name);
    $self->buffer;
    $self->getset('lock_state', 1);
    $self->getset('locked_by', "");
    $self->unbuffer;
}

# get the member variable 'id'
sub id {
    my ($self) = @_;
    return($self->{'id'});
}

# test if the data is buffered or passed to the DBMS immediately
sub buffered {
    my ($self) = @_;
    return($self->{'_buffer'});
}

# make the data buffered, i.e. don't write to the database
sub buffer {
    my ($self) = @_;
    $self->{'_buffer'} = 1;
}

# write the current contents to the database and declare the object unbuffered
sub unbuffer {
    my ($self) = @_;
    if ($self->buffered) {
	my @sql = ();
	foreach $key (qw{project_name job_info lock_state locked_by id}) {
	    push(@sql, "$key=".$JOBDB_DBH->quote($self->{$key}));
	}
	my $id = $self->id;
	my $sql = "UPDATE job SET ".join(', ', @sql)." WHERE id=$id";
	$JOBDB_DBH->do($sql) || return(-1);
    }
    $self->{'_buffer'} = 0;
}

# get or set one of the member variables
sub getset {
    my ($self, $var, $val) = @_;
    my $id = $self->id;
    if (defined($val)) {
	if (!$self->buffered) {
	    my $qval = $JOBDB_DBH->quote($val);
	    $JOBDB_DBH->do(qq {
		UPDATE job SET $var=$qval WHERE id=$id
		}) || return(-1);
	}
	$self->{$var} = $val;
    }
    return($self->{$var});
}

